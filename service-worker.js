importScripts("/precache-manifest.9f48a957b382a27bc4514a33d29c8f0c.js", "/workbox-v3.6.3/workbox-sw.js");
workbox.setConfig({modulePathPrefix: "/workbox-v3.6.3"});
/* globals workbox */
/* eslint-disable no-restricted-globals */
workbox.core.setCacheNameDetails({
  prefix: 'antd-pro',
  suffix: 'v1',
});
// Control all opened tabs ASAP
workbox.clientsClaim();

/**
 * Use precaching list generated by workbox in build process.
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.precaching
 */
/* eslint-disable no-underscore-dangle */
workbox.precaching.precacheAndRoute(self.__precacheManifest || []);

/**
 * Register a navigation route.
 * https://developers.google.com/web/tools/workbox/modules/workbox-routing#how_to_register_a_navigation_route
 */
workbox.routing.registerNavigationRoute('/index.html');

/**
 * Use runtime cache:
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.routing#.registerRoute
 *
 * Workbox provides all common caching strategies including CacheFirst, NetworkFirst etc.
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.strategies
 */

/**
 * Handle API requests
 */
workbox.routing.registerRoute(/\/api\//, workbox.strategies.networkFirst());

/**
 * Handle third party requests
 */
workbox.routing.registerRoute(
  /^https:\/\/gw.alipayobjects.com\//,
  workbox.strategies.networkFirst()
);
workbox.routing.registerRoute(
  /^https:\/\/cdnjs.cloudflare.com\//,
  workbox.strategies.networkFirst()
);
workbox.routing.registerRoute(/\/color.less/, workbox.strategies.networkFirst());

/**
 * Response to client after skipping waiting with MessageChannel
 */
addEventListener('message', event => {
  const replyPort = event.ports[0];
  const message = event.data;
  if (replyPort && message && message.type === 'skip-waiting') {
    event.waitUntil(
      self
        .skipWaiting()
        .then(
          () => replyPort.postMessage({ error: null }),
          error => replyPort.postMessage({ error })
        )
    );
  }
});

// navigator.serviceWorker
//   .register('./firebase-messaging-sw.js')
//   .then(registration => {
//     registration.onupdatefound = () => {
//       const installingWorker = registration.installing;
//       installingWorker.onstatechange = () => {
//         if (installingWorker.state === 'installed') {
//           if (navigator.serviceWorker.controller) {
//             // At this point, the old content will have been purged and
//             // the fresh content will have been added to the cache.
//             // It's the perfect time to display a "New content is
//             // available; please refresh." message in your web app.
//             console.log('New content is available; please refresh.');
//           } else {
//             // At this point, everything has been precached.
//             // It's the perfect time to display a
//             // "Content is cached for offline use." message.
//             console.log('Content is cached for offline use.');
//           }
//         }
//       };
//     };
//   })
//   .catch(error => {
//     console.error('Error during service worker registration:', error);
//   });
